{
  "name": "todoapi",
  "version": "1.0.0",
  "main": "src/server.ts",
  "author": "Daniel Khoo",
  "license": "MIT",
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.178.0",
    "@aws-sdk/lib-dynamodb": "^3.178.0",
    "@vendia/serverless-express": "^4.10.1",
    "dotenv": "^16.0.2",
    "express": "^4.18.1",
    "aws-lambda": "^1.0.7",
    "cross-var": "^1.1.0"
  },
  "devDependencies": {
    "@types/express": "^4.17.14",
    "@types/node": "^18.7.21",
    "nodemon": "^2.0.20",
    "ts-node": "^10.9.1",
    "typescript": "^4.8.3"
  },
  "config": {
    "s3BucketName": "todoapi-serverless-s3",
    "region": "ap-southeast-2",
    "cloudFormationStackName": "todoapi-cloud-formation",
    "functionName": "todoapi",
    "domain": "todoapi.khoo.one"
  },
  "scripts": {
    "dev": "NODE_ENV=development nodemon --watch 'src/**/*.ts' --exec ts-node src/server.ts",
    "build": "tsc",
    "postbuild": "cp package*json dist/",
    "create-bucket": "cross-var aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "cross-var aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-stack": "cross-var aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "develop": "nodemon --config nodemon.json",
    "invoke-lambda": "cross-var aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --cli-binary-format raw-in-base64-out --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "local": "ts-node scripts/local",
    "sam:build": "sam build --template ./sam-template.yaml",
    "sam:deploy": "cross-var sam deploy --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --s3-bucket $npm_package_config_s3BucketName --s3-prefix $npm_package_name --parameter-overrides DomainName=$npm_package_config_domain --region $npm_package_config_region --no-fail-on-empty-changeset",
    "package-deploy": "yarn build && yarn sam:build && yarn sam:deploy",
    "setup": "npm install && (cross-var aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || yarn create-bucket) && yarn package-deploy",
    "start": "cross-env DEBUG=http NODE_ENV=production ts-node src/app.local",
    "test": "cross-env NODE_ENV=test mocha",
    "test:watch": "npm test -- -- -w"
  }
}
